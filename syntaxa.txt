GLOBAL
    be t: char;
    be c: int;
    be x: char, i: int;
    be tmp: int;
    be arr[5]: int;
    be t: bool;
    be s: float;
END_GLOBAL

FUNC
    def func(a: int, b: int) -> int {};
    def func1(d: int, y: int) -> int{
        be y: MyObj4{};
        c := 4;
    };
    def func3() -> string{
        t := "u";
    };
END_FUNC

OBJECT
    object MyObj1[
        method func() -> string;
    ];

    object MyObj2[];

    object MyObj3
    [
        attr d: int, y: char;
        attr x: float;
        
        method func(c: int, d: int) -> int;
        method func2(d: float, y:float) -> float;
    ];

    object MyObj5[
        attr x: string, tmp: float;
    ];

    impl func(c: int, d: int) -> int of MyObj3 {
         c := d;
         tmp := 5;
    };

    object MyObj6[
        attr x: string, tmp: float;
        method func6() -> string;
    ];

        object MyObj6[
        attr x: string, tmp: float;
        method func6() -> string;
    ];

    impl func6() -> string of MyObj6 {};

    object Myobj10[];

    object Myobj11 : inherit Myobj10 [
        attr x: int;
        method func(c: int, d: int) -> int;
    ];

    impl func(c: int, d: int) -> int of Myobj11{};
END_OBJECT

BEGIN_PROGRAM
    t := "c";
    be x: int := 1;
    c := y->d;
    be c: float := y->d;
    be c: string := func(1, "3");
    d := 11231.12312312;
    d := 0.123131;

    be y: Myobj3{"4", 6};
    be x: Myobj{func1(1+2, 2), func2(func4(4+1))};
    t := Myobj3->func2(4, "abcd");
    be d: float := Myobj3->func2(4, "2312");
    Myobj3->d := func(1, "231");
    Myobj3->x := Myobj3->func2(4, Myobj3->d);
    Myobj4->func2("1231", Myobj3->d);

    be arr[5]: int := {func1(), "232", Myobj3->func1()};
    arr[5] := {1, 1231, 12312, "1232131"};
    be arr[5] : string;

    while x >= 10 {
        Myobj3->d := func(1, "231");
        Myobj3->x := Myobj3->func2(4, "1231");
        Myobj4->func2("1231", Myobj3->d);

        if [b + 4] and 5 {
            t := "c";
            x := [c * 3] + [c - 2] * 2;
        };

        while [not c != 1+2] and [d+func(1, func(3) + 6) <= a[5]] or [d != false and x >= 3]{
            x := 1;

            if b < 5 {
                be c: float := y->d;
            }
            elif d >= 5 {
                Myobj3->func1(1, "1231");
                c := 1 + 3;
                if [d - func(1)] == Myobj3->func1(1, "1231"){
                    c := c + 1;
                };
            }
            else{
                Myobj1->func1(1, "1231");
            };
        };

        for x:=4+func(1); x+1 <= 10; x := x + 1{

            if [b + 4] and not 5 {
                t := "c";
                x := [c * 3] +  [c - 2] * 2;
            };

        };
    };
    
    if b and 5 {
        t := "c";
    }
    elif c < 5 {
        c := 1;
    };

END_PROGRAM
